diff --git a/src/sixty_four.rs b/src/sixty_four.rs
index 9bd351c..c151586 100644
--- a/src/sixty_four.rs
+++ b/src/sixty_four.rs
@@ -65,10 +65,10 @@ impl XxCore {
         let mut v4 = self.v4;
 
         for [n1, n2, n3, n4] in values {
-            v1 = ingest_one_number(v1, n1);
-            v2 = ingest_one_number(v2, n2);
-            v3 = ingest_one_number(v3, n3);
-            v4 = ingest_one_number(v4, n4);
+            v1 = ingest_one_number(v1, n1.to_le());
+            v2 = ingest_one_number(v2, n2.to_le());
+            v3 = ingest_one_number(v3, n3.to_le());
+            v4 = ingest_one_number(v4, n4.to_le());
         }
 
         self.v1 = v1;
@@ -221,7 +221,7 @@ impl XxHash64 {
 
         let mut buffered_u64s = UnalignedBuffer::<u64>::new(self.buffer.data());
         for buffered_u64 in &mut buffered_u64s {
-            let mut k1 = buffered_u64.wrapping_mul(PRIME_2);
+            let mut k1 = buffered_u64.to_le().wrapping_mul(PRIME_2);
             k1 = k1.rotate_left(31);
             k1 = k1.wrapping_mul(PRIME_1);
             hash ^= k1;
@@ -232,7 +232,7 @@ impl XxHash64 {
 
         let mut buffered_u32s = UnalignedBuffer::<u32>::new(buffered_u64s.remaining());
         for buffered_u32 in &mut buffered_u32s {
-            let k1 = u64::from(buffered_u32).wrapping_mul(PRIME_1);
+            let k1 = u64::from(buffered_u32.to_le()).wrapping_mul(PRIME_1);
             hash ^= k1;
             hash = hash.rotate_left(23);
             hash = hash.wrapping_mul(PRIME_2);
diff --git a/src/thirty_two.rs b/src/thirty_two.rs
index 86b2b19..cfa44cd 100644
--- a/src/thirty_two.rs
+++ b/src/thirty_two.rs
@@ -70,10 +70,10 @@ impl XxCore {
         let mut v4 = self.v4;
 
         for [n1, n2, n3, n4] in values {
-            v1 = ingest_one_number(v1, n1);
-            v2 = ingest_one_number(v2, n2);
-            v3 = ingest_one_number(v3, n3);
-            v4 = ingest_one_number(v4, n4);
+            v1 = ingest_one_number(v1, n1.to_le());
+            v2 = ingest_one_number(v2, n2.to_le());
+            v3 = ingest_one_number(v3, n3.to_le());
+            v4 = ingest_one_number(v4, n4.to_le());
         }
 
         self.v1 = v1;
@@ -211,7 +211,7 @@ impl XxHash32 {
 
         let mut buffered_u32s = UnalignedBuffer::<u32>::new(self.buffer.data());
         for buffered_u32 in &mut buffered_u32s {
-            let k1 = buffered_u32.wrapping_mul(PRIME_3);
+            let k1 = buffered_u32.to_le().wrapping_mul(PRIME_3);
             hash = hash.wrapping_add(k1);
             hash = hash.rotate_left(17);
             hash = hash.wrapping_mul(PRIME_4);
diff --git a/src/xxh3.rs b/src/xxh3.rs
index b793a52..0ffc541 100644
--- a/src/xxh3.rs
+++ b/src/xxh3.rs
@@ -754,7 +754,7 @@ mod generic {
             let data_key1 = key1 ^ in1;
             let data_key2 = key2 ^ in2;
             acc[i] = acc[i].wrapping_add(mul32_to64(data_key1, data_key1 >> 32));
-            acc[i + 1] = acc[i].wrapping_add(mul32_to64(data_key2, data_key2 >> 32));
+            acc[i + 1] = acc[i + 1].wrapping_add(mul32_to64(data_key2, data_key2 >> 32));
 
             if acc_width == AccWidth::Acc128Bits {
                 acc[i] = acc[i].wrapping_add(in2);
